import axios from "axios";
import {
  getToken,
  getRefreshToken,
  saveToken,
  removeToken,
} from "../utils/storage";

const apiClient = axios.create({
  baseURL: "http://localhost:8080/api/",
  timeout: 10000,
});

// G·∫Øn accessToken cho m·ªói request
apiClient.interceptors.request.use(
  (config) => {
    console.log("üîç Axios request:", {
      url: config.url,
      method: config.method,
      baseURL: config.baseURL,
      fullURL: config.baseURL + config.url,
    });

    const token = getToken();
    const noAuthPaths = [
      "/auth/login",
      "/auth/register",
      "/auth/refresh-token",
    ];

    // ‚ùå Kh√¥ng g·∫Øn token cho c√°c request login/register/refresh-token
    if (token && !noAuthPaths.some((path) => config.url.includes(path))) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log("üîç Added Authorization header");
    } else {
      console.log("üîç No Authorization header added");
    }

    return config;
  },
  (error) => {
    console.error("üîç Axios request error:", error);
    return Promise.reject(error);
  }
);

apiClient.interceptors.response.use(
  (response) => {
    console.log("üîç Axios response:", {
      url: response.config.url,
      status: response.status,
      data: response.data,
    });
    return response;
  },
  async (error) => {
    console.error("üîç Axios response error:", {
      url: error.config?.url,
      status: error.response?.status,
      data: error.response?.data,
      message: error.message,
    });
    const originalRequest = error.config;

    const status = error.response ? error.response.status : null;
    const refreshToken = getRefreshToken(); // L·∫•y refreshToken ngay t·ª´ ƒë·∫ßu

    if (
      originalRequest._retry ||
      originalRequest.url.includes("/auth/refresh-token")
    ) {
      return Promise.reject(error);
    }

    // 2. Ch·ªâ x·ª≠ l√Ω l·ªói 401 V√Ä khi c√≥ refreshToken
    if ((status === 401 || status === 403) && refreshToken) {
      originalRequest._retry = true; // ƒê√°nh d·∫•u l√† ƒë√£ th·ª≠ l·∫°i

      try {
        // G·ªçi refresh token
        const response = await axios.post(
          "http://localhost:8080/api/auth/refresh-token",
          null,
          {
            headers: {
              "X-Refresh-Token": refreshToken,
            },
          }
        );

        const newAccessToken = response.data.data.accessToken;
        const newRefreshToken = response.data.data.refreshToken;

        saveToken(newAccessToken, newRefreshToken); // L∆∞u token m·ªõi

        // G·∫Øn token m·ªõi v√† g·ª≠i l·∫°i request c≈©
        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
        return apiClient(originalRequest); // G·ª≠i l·∫°i request ban ƒë·∫ßu
      } catch (refreshError) {
        // N·∫øu qu√° tr√¨nh refresh token th·∫•t b·∫°i (refresh token h·∫øt h·∫°n/kh√¥ng h·ª£p l·ªá)
        removeToken(); // X√≥a t·∫•t c·∫£ token
        // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng v·ªÅ trang ƒëƒÉng nh·∫≠p n·∫øu c·∫ßn
        // window.location.href = '/login';
        return Promise.reject(refreshError);
      }
    }

    // ƒê·ªëi v·ªõi c√°c l·ªói kh√°c (kh√¥ng ph·∫£i 401, ho·∫∑c 401 nh∆∞ng kh√¥ng c√≥ refreshToken),
    // ho·∫∑c l·ªói 401 m√† kh√¥ng c√≥ originalRequest.response (v√≠ d·ª• l·ªói m·∫°ng),
    // ho·∫∑c l·ªói 401 nh∆∞ng kh√¥ng c√≥ refresh token (ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p)
    return Promise.reject(error);
  }
);

export default apiClient;
