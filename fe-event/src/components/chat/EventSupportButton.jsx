import { useState, useEffect } from "react";
import { Building2, Shield, Info } from "lucide-react";
import useAuth from "../../hooks/useAuth";
import { toast } from "react-toastify";
import chatService from "../../services/chatService";

const EventSupportButton = ({ event, organizer }) => {
  const [loading, setLoading] = useState(false);
  const [adminUserId, setAdminUserId] = useState(null);
  const { user } = useAuth();

  // L·∫•y admin user ID khi component mount
  useEffect(() => {
    const fetchAdminUserId = async () => {
      try {
        const response = await chatService.getAdminUserId();
        if (response.code === 200) {
          setAdminUserId(response.data);
        }
      } catch (error) {
        console.error("Error fetching admin user ID:", error);
      }
    };
    fetchAdminUserId();
  }, []);

  const formatEventInfo = (event) => {
    const showingTime = event.showingTimes?.[0];
    const address = showingTime?.address;

    return `
üìÖ **Th√¥ng tin s·ª± ki·ªán c·∫ßn h·ªó tr·ª£:**

üéØ **T√™n s·ª± ki·ªán:** ${event.eventTitle || event.title || event.name}
üìù **M√¥ t·∫£:** ${event.description || "Kh√¥ng c√≥ m√¥ t·∫£"}
üìç **ƒê·ªãa ƒëi·ªÉm:** ${
      address ? `${address.venueName} - ${address.location}` : "Ch∆∞a c·∫≠p nh·∫≠t"
    }
üìÖ **Ng√†y:** ${
      showingTime?.startTime
        ? new Date(showingTime.startTime).toLocaleDateString("vi-VN")
        : "Ch∆∞a c·∫≠p nh·∫≠t"
    }
‚è∞ **Gi·ªù:** ${
      showingTime?.startTime
        ? new Date(showingTime.startTime).toLocaleTimeString("vi-VN", {
            hour: "2-digit",
            minute: "2-digit",
          })
        : "Ch∆∞a c·∫≠p nh·∫≠t"
    }
üè¢ **Nh√† t·ªï ch·ª©c:** ${organizer?.fullName || organizer?.name || "Kh√¥ng r√µ"}
üí∞ **Gi√° v√©:** ${
      showingTime?.price
        ? `${showingTime.price.toLocaleString("vi-VN")} VNƒê`
        : "Ch∆∞a c·∫≠p nh·∫≠t"
    }

T√¥i c·∫ßn h·ªó tr·ª£ v·ªÅ s·ª± ki·ªán n√†y.`.trim();
  };

  const handleSendDirectMessage = async (receiverId, isAdmin = false) => {
    if (!user) {
      toast.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ y√™u c·∫ßu h·ªó tr·ª£");
      return;
    }

    if (receiverId === user.id) {
      toast.error("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn cho ch√≠nh m√¨nh");
      return;
    }

    setLoading(true);
    try {
      const eventInfo = formatEventInfo(event);
      const message = isAdmin
        ? `Xin ch√†o Admin! ${eventInfo}`
        : `Xin ch√†o! ${eventInfo}`;

      // G·ª≠i tin nh·∫Øn tr·ª±c ti·∫øp thay v√¨ t·∫°o cu·ªôc tr√≤ chuy·ªán
      await chatService.sendMessage(receiverId, message, "TEXT", event.id);

      toast.success(
        `ƒê√£ g·ª≠i y√™u c·∫ßu h·ªó tr·ª£ t·ªõi ${isAdmin ? "Admin" : "Nh√† t·ªï ch·ª©c"}!`
      );

      // Trigger chat widget to open
      localStorage.setItem("openChatWidget", "true");
      window.dispatchEvent(new Event("openChatWidget"));
    } catch (error) {
      console.error("Error sending direct message:", error);
      toast.error("Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu h·ªó tr·ª£. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setLoading(false);
    }
  };

  const handleSendToOrganizer = async () => {
    if (!user) {
      toast.error("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ y√™u c·∫ßu h·ªó tr·ª£");
      return;
    }

    if (!event || !event.id) {
      toast.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin s·ª± ki·ªán");
      return;
    }

    setLoading(true);
    try {
      // L·∫•y organizer user ID cho s·ª± ki·ªán n√†y
      const organizerResponse = await chatService.getOrganizerUserId(event.id);
      if (organizerResponse.code !== 200) {
        throw new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin organizer");
      }

      const organizerUserId = organizerResponse.data;

      if (organizerUserId === user.id) {
        toast.error("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn cho ch√≠nh m√¨nh");
        return;
      }

      const eventInfo = formatEventInfo(event);
      const message = `Xin ch√†o! ${eventInfo}`;

      // G·ª≠i tin nh·∫Øn tr·ª±c ti·∫øp
      await chatService.sendMessage(organizerUserId, message, "TEXT", event.id);

      toast.success("ƒê√£ g·ª≠i y√™u c·∫ßu h·ªó tr·ª£ t·ªõi nh√† t·ªï ch·ª©c!");

      // Trigger chat widget to open
      localStorage.setItem("openChatWidget", "true");
      window.dispatchEvent(new Event("openChatWidget"));
    } catch (error) {
      console.error("Error sending message to organizer:", error);
      toast.error("Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu h·ªó tr·ª£. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setLoading(false);
    }
  };

  const getRoleIcon = (role) => {
    switch (role) {
      case "ADMIN":
        return <Shield className="w-4 h-4 text-red-500" />;
      case "ORGANIZER":
        return <Building2 className="w-4 h-4 text-blue-500" />;
      default:
        return null;
    }
  };

  if (!user) {
    return null;
  }

  return (
    <div className="bg-gray-800/50 border border-gray-700/50 rounded-xl p-6">
      <div className="flex items-center mb-4">
        <Info className="w-5 h-5 text-blue-400 mr-2" />
        <h3 className="text-lg font-semibold text-white">
          G·ª≠i y√™u c·∫ßu h·ªó tr·ª£ s·ª± ki·ªán
        </h3>
      </div>

      <p className="text-gray-300 mb-6">
        B·∫°n c√≥ c√¢u h·ªèi v·ªÅ s·ª± ki·ªán n√†y? H√£y g·ª≠i tin nh·∫Øn tr·ª±c ti·∫øp t·ªõi nh√† t·ªï
        ch·ª©c ho·∫∑c admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ ngay l·∫≠p t·ª©c.
      </p>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* G·ª≠i y√™u c·∫ßu Admin */}
        {adminUserId && adminUserId !== user.id && (
          <button
            onClick={() => handleSendDirectMessage(adminUserId, true)}
            disabled={loading}
            className="flex items-center justify-center space-x-3 px-6 py-4 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-xl hover:from-red-600 hover:to-red-700 disabled:opacity-50 transition-all duration-200 shadow-lg hover:shadow-xl"
          >
            <Shield className="w-5 h-5" />
            <span className="font-medium">G·ª≠i y√™u c·∫ßu Admin</span>
            {loading && (
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
            )}
          </button>
        )}

        {/* G·ª≠i y√™u c·∫ßu Organizer */}
        <button
          onClick={handleSendToOrganizer}
          disabled={loading}
          className="flex items-center justify-center space-x-3 px-6 py-4 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl hover:from-blue-600 hover:to-blue-700 disabled:opacity-50 transition-all duration-200 shadow-lg hover:shadow-xl"
        >
          <Building2 className="w-5 h-5" />
          <span className="font-medium">G·ª≠i y√™u c·∫ßu Organizer</span>
          {loading && (
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
          )}
        </button>
      </div>

      {loading && (
        <div className="mt-4 text-center text-sm text-gray-400">
          ƒêang g·ª≠i y√™u c·∫ßu h·ªó tr·ª£...
        </div>
      )}

      <div className="mt-6 p-4 bg-blue-500/10 rounded-lg border border-blue-500/20">
        <p className="text-sm text-blue-300">
          <strong>üí° L∆∞u √Ω:</strong> Tin nh·∫Øn s·∫Ω ƒë∆∞·ª£c g·ª≠i tr·ª±c ti·∫øp t·ªõi ng∆∞·ªùi
          nh·∫≠n. Th√¥ng tin s·ª± ki·ªán s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông g·ª≠i k√®m ƒë·ªÉ admin/organizer c√≥
          th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët h∆°n.
        </p>
      </div>
    </div>
  );
};

export default EventSupportButton;
